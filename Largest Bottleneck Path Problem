//Widest Path Problem (or largets Bottleneck problem) for directed acyclic graphs
//By: Tanmay Agarwal
#include<bits/stdc++.h>
using namespace std;

class Graph{
    int number_of_nodes = 5;
    vector<pair<int,int> >adj[5];
    priority_queue <pair<int,int> >pq;
    public:
        
        void addEdge(int a, int b, int c){
            adj[a].push_back(make_pair(b,c));
        }

        void showGraph(){
            int i = 0;
            for (i = 0; i<number_of_nodes; i++){
                cout<<i<<"->";
                for(auto x:adj[i])
                    cout<<x.first<<"("<<x.second<<"), ";
                cout<<endl;
            }
        }

        void widest_path_problem(){
            int distance[number_of_nodes];
            int i = 0;
            int result[number_of_nodes];
            for(; i<number_of_nodes; i++)
                distance[i] = INT_MIN;
            distance[1] = INT_MAX;
            pq.push(make_pair(INT_MAX,1));
            while(!pq.empty()){
                int max_vertex = pq.top().second;
                int max_width = pq.top().first;
                pq.pop();
                result[max_vertex] = max_width; 
                for(auto x : adj[max_vertex]){
                    distance[x.first] = max(min(x.second,max_width),distance[x.first]);
                    pq.push(make_pair(distance[x.first],x.first));        
                }
            }
            for(i = 1; i<number_of_nodes; i++){
                if(result[i]>2000000000)
                    cout<<"This is the first node so no flow thorugh this node."<<endl;
                else
                    cout<<"Maximum flow though node "<<i<<" is: "<<result[i]<<endl; 
            }                           
        }
};

int main(){
    Graph obj = Graph();
    obj.addEdge(1,2,1);
    obj.addEdge(2,3,3);
    obj.addEdge(1,4,2);
    obj.addEdge(4,3,5);
    obj.widest_path_problem();
    return 0;
}
